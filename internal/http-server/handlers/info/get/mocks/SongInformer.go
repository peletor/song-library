// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "song-library/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// SongInformer is an autogenerated mock type for the SongInformer type
type SongInformer struct {
	mock.Mock
}

// SongInfo provides a mock function with given fields: groupName, songName
func (_m *SongInformer) SongInfo(groupName string, songName string) (models.SongDetail, error) {
	ret := _m.Called(groupName, songName)

	if len(ret) == 0 {
		panic("no return value specified for SongInfo")
	}

	var r0 models.SongDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.SongDetail, error)); ok {
		return rf(groupName, songName)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.SongDetail); ok {
		r0 = rf(groupName, songName)
	} else {
		r0 = ret.Get(0).(models.SongDetail)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(groupName, songName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSongInformer creates a new instance of SongInformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSongInformer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SongInformer {
	mock := &SongInformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
